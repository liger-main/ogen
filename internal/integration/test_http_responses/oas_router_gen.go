// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "anyContentTypeBinaryStringSchema"
				origElem := elem
				if l := len("anyContentTypeBinaryStringSchema"); len(elem) >= l && elem[0:l] == "anyContentTypeBinaryStringSchema" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleAnyContentTypeBinaryStringSchemaRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case 'D': // Prefix: "Default"
					origElem := elem
					if l := len("Default"); len(elem) >= l && elem[0:l] == "Default" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleAnyContentTypeBinaryStringSchemaDefaultRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "combined"
				origElem := elem
				if l := len("combined"); len(elem) >= l && elem[0:l] == "combined" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleCombinedRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'h': // Prefix: "headers"
				origElem := elem
				if l := len("headers"); len(elem) >= l && elem[0:l] == "headers" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '2': // Prefix: "200"
					origElem := elem
					if l := len("200"); len(elem) >= l && elem[0:l] == "200" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleHeaders200Request([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'C': // Prefix: "Combined"
					origElem := elem
					if l := len("Combined"); len(elem) >= l && elem[0:l] == "Combined" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleHeadersCombinedRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'D': // Prefix: "Default"
					origElem := elem
					if l := len("Default"); len(elem) >= l && elem[0:l] == "Default" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleHeadersDefaultRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'J': // Prefix: "JSON"
					origElem := elem
					if l := len("JSON"); len(elem) >= l && elem[0:l] == "JSON" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleHeadersJSONRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'P': // Prefix: "Pattern"
					origElem := elem
					if l := len("Pattern"); len(elem) >= l && elem[0:l] == "Pattern" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleHeadersPatternRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'i': // Prefix: "intersectPatternCode"
				origElem := elem
				if l := len("intersectPatternCode"); len(elem) >= l && elem[0:l] == "intersectPatternCode" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleIntersectPatternCodeRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'm': // Prefix: "multipleGenericResponses"
				origElem := elem
				if l := len("multipleGenericResponses"); len(elem) >= l && elem[0:l] == "multipleGenericResponses" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleMultipleGenericResponsesRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'o': // Prefix: "o"
				origElem := elem
				if l := len("o"); len(elem) >= l && elem[0:l] == "o" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "ctetStream"
					origElem := elem
					if l := len("ctetStream"); len(elem) >= l && elem[0:l] == "ctetStream" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'B': // Prefix: "BinaryStringSchema"
						origElem := elem
						if l := len("BinaryStringSchema"); len(elem) >= l && elem[0:l] == "BinaryStringSchema" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleOctetStreamBinaryStringSchemaRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					case 'E': // Prefix: "EmptySchema"
						origElem := elem
						if l := len("EmptySchema"); len(elem) >= l && elem[0:l] == "EmptySchema" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleOctetStreamEmptySchemaRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'p': // Prefix: "ptionalHeaders"
					origElem := elem
					if l := len("ptionalHeaders"); len(elem) >= l && elem[0:l] == "ptionalHeaders" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleOptionalHeadersRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 's': // Prefix: "streamJSON"
				origElem := elem
				if l := len("streamJSON"); len(elem) >= l && elem[0:l] == "streamJSON" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleStreamJSONRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

				elem = origElem
			case 't': // Prefix: "textPlainBinaryStringSchema"
				origElem := elem
				if l := len("textPlainBinaryStringSchema"); len(elem) >= l && elem[0:l] == "textPlainBinaryStringSchema" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleTextPlainBinaryStringSchemaRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [0]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "anyContentTypeBinaryStringSchema"
				origElem := elem
				if l := len("anyContentTypeBinaryStringSchema"); len(elem) >= l && elem[0:l] == "anyContentTypeBinaryStringSchema" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "AnyContentTypeBinaryStringSchema"
						r.summary = ""
						r.operationID = "anyContentTypeBinaryStringSchema"
						r.pathPattern = "/anyContentTypeBinaryStringSchema"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case 'D': // Prefix: "Default"
					origElem := elem
					if l := len("Default"); len(elem) >= l && elem[0:l] == "Default" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: AnyContentTypeBinaryStringSchemaDefault
							r.name = "AnyContentTypeBinaryStringSchemaDefault"
							r.summary = ""
							r.operationID = "anyContentTypeBinaryStringSchemaDefault"
							r.pathPattern = "/anyContentTypeBinaryStringSchemaDefault"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "combined"
				origElem := elem
				if l := len("combined"); len(elem) >= l && elem[0:l] == "combined" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: Combined
						r.name = "Combined"
						r.summary = ""
						r.operationID = "combined"
						r.pathPattern = "/combined"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'h': // Prefix: "headers"
				origElem := elem
				if l := len("headers"); len(elem) >= l && elem[0:l] == "headers" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '2': // Prefix: "200"
					origElem := elem
					if l := len("200"); len(elem) >= l && elem[0:l] == "200" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: Headers200
							r.name = "Headers200"
							r.summary = ""
							r.operationID = "headers200"
							r.pathPattern = "/headers200"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'C': // Prefix: "Combined"
					origElem := elem
					if l := len("Combined"); len(elem) >= l && elem[0:l] == "Combined" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: HeadersCombined
							r.name = "HeadersCombined"
							r.summary = ""
							r.operationID = "headersCombined"
							r.pathPattern = "/headersCombined"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'D': // Prefix: "Default"
					origElem := elem
					if l := len("Default"); len(elem) >= l && elem[0:l] == "Default" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: HeadersDefault
							r.name = "HeadersDefault"
							r.summary = ""
							r.operationID = "headersDefault"
							r.pathPattern = "/headersDefault"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'J': // Prefix: "JSON"
					origElem := elem
					if l := len("JSON"); len(elem) >= l && elem[0:l] == "JSON" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: HeadersJSON
							r.name = "HeadersJSON"
							r.summary = ""
							r.operationID = "headersJSON"
							r.pathPattern = "/headersJSON"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'P': // Prefix: "Pattern"
					origElem := elem
					if l := len("Pattern"); len(elem) >= l && elem[0:l] == "Pattern" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: HeadersPattern
							r.name = "HeadersPattern"
							r.summary = ""
							r.operationID = "headersPattern"
							r.pathPattern = "/headersPattern"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'i': // Prefix: "intersectPatternCode"
				origElem := elem
				if l := len("intersectPatternCode"); len(elem) >= l && elem[0:l] == "intersectPatternCode" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: IntersectPatternCode
						r.name = "IntersectPatternCode"
						r.summary = ""
						r.operationID = "intersectPatternCode"
						r.pathPattern = "/intersectPatternCode"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'm': // Prefix: "multipleGenericResponses"
				origElem := elem
				if l := len("multipleGenericResponses"); len(elem) >= l && elem[0:l] == "multipleGenericResponses" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: MultipleGenericResponses
						r.name = "MultipleGenericResponses"
						r.summary = ""
						r.operationID = "multipleGenericResponses"
						r.pathPattern = "/multipleGenericResponses"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'o': // Prefix: "o"
				origElem := elem
				if l := len("o"); len(elem) >= l && elem[0:l] == "o" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "ctetStream"
					origElem := elem
					if l := len("ctetStream"); len(elem) >= l && elem[0:l] == "ctetStream" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'B': // Prefix: "BinaryStringSchema"
						origElem := elem
						if l := len("BinaryStringSchema"); len(elem) >= l && elem[0:l] == "BinaryStringSchema" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: OctetStreamBinaryStringSchema
								r.name = "OctetStreamBinaryStringSchema"
								r.summary = ""
								r.operationID = "octetStreamBinaryStringSchema"
								r.pathPattern = "/octetStreamBinaryStringSchema"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'E': // Prefix: "EmptySchema"
						origElem := elem
						if l := len("EmptySchema"); len(elem) >= l && elem[0:l] == "EmptySchema" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: OctetStreamEmptySchema
								r.name = "OctetStreamEmptySchema"
								r.summary = ""
								r.operationID = "octetStreamEmptySchema"
								r.pathPattern = "/octetStreamEmptySchema"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'p': // Prefix: "ptionalHeaders"
					origElem := elem
					if l := len("ptionalHeaders"); len(elem) >= l && elem[0:l] == "ptionalHeaders" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: OptionalHeaders
							r.name = "OptionalHeaders"
							r.summary = ""
							r.operationID = "optionalHeaders"
							r.pathPattern = "/optionalHeaders"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 's': // Prefix: "streamJSON"
				origElem := elem
				if l := len("streamJSON"); len(elem) >= l && elem[0:l] == "streamJSON" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "POST":
						// Leaf: StreamJSON
						r.name = "StreamJSON"
						r.summary = ""
						r.operationID = "streamJSON"
						r.pathPattern = "/streamJSON"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 't': // Prefix: "textPlainBinaryStringSchema"
				origElem := elem
				if l := len("textPlainBinaryStringSchema"); len(elem) >= l && elem[0:l] == "textPlainBinaryStringSchema" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: TextPlainBinaryStringSchema
						r.name = "TextPlainBinaryStringSchema"
						r.summary = ""
						r.operationID = "textPlainBinaryStringSchema"
						r.pathPattern = "/textPlainBinaryStringSchema"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
